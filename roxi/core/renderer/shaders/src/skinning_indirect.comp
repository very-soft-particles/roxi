// from HelloVulkan
#version 460 core

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

#include "../header/skinning_indirect.glsl"

//layout(set = 0, binding = 0) readonly buffer M { mat4 final_bone_matrices[]; };
//layout(set = 0, binding = 1) readonly buffer B { ivec4 bone_id_array[]; };
//layout(set = 0, binding = 2) readonly buffer W { vec4 weight_array[]; };
//layout(set = 0, binding = 3) readonly buffer I { uint skinning_indices[]; }; // Mapping from
//                                                                             // in_vertices
//                                                                             // to out_vertices
//layout(set = 0, binding = 4) readonly buffer V_In { VertexData in_vertices []; }; // Vertex input
//layout(set = 0, binding = 5) buffer V_Out { VertexData out_vertices[]; }; // Vertex output

void main() {

  get_skinning_param_id();

	const uint idx_in = gl_GlobalInvocationID.x;

	if (idx_in >= get_vertices_in().length())
	{
		return;
	}

	VertexData vert_in = get_vertices_in()[idx_in];
	vec3 total_position = vec3(0.0f);
	vec3 total_normal = vec3(0.0f);
	ivec4 bone_ids = get_bone_ids()[idx_in];
	vec4 weights = get_weights()[idx_in];

	total_position += (final_bone_matrices[bone_ids[0]] * vec4(vert_in.position, 1.0f)).xyz * weights[0];
	total_position += (final_bone_matrices[bone_ids[1]] * vec4(vert_in.position, 1.0f)).xyz * weights[1];
	total_position += (final_bone_matrices[bone_ids[2]] * vec4(vert_in.position, 1.0f)).xyz * weights[2];
	total_position += (final_bone_matrices[bone_ids[3]] * vec4(vert_in.position, 1.0f)).xyz * weights[3];

	total_normal += (mat3(final_bone_matrices[bone_ids[0]]) * vert_in.normal) * weights[0];
	total_normal += (mat3(final_bone_matrices[bone_ids[1]]) * vert_in.normal) * weights[1];
	total_normal += (mat3(final_bone_matrices[bone_ids[2]]) * vert_in.normal) * weights[2];
	total_normal += (mat3(final_bone_matrices[bone_ids[3]]) * vert_in.normal) * weights[3];

	uint idx_out = get_skinning_indices()[idx_in];
	get_vertices_out()[idx_out].position = total_position;
	get_vertices_out()[idx_out].normal = total_normal;
}
